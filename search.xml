<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>建站记录系列（二）——正式建站</title>
      <link href="/article/2601d0bcdbb7.html"/>
      <url>/article/2601d0bcdbb7.html</url>
      
        <content type="html"><![CDATA[<p>买好服务器之后可以进入“云服务器ECS”控制台页面来查看自己服务器的情况以及对它进行各种操作。最重要的是，你现在可以知道你的服务器的公网ip地址。</p><h2 id="SSH登录服务器"><a href="#SSH登录服务器" class="headerlink" title="SSH登录服务器"></a>SSH登录服务器</h2><p>首先如果是win10的电脑的话，可以查看一下有没有自带的一个叫openssh的工具，可以在命令行输入命令<code>ssh -V</code>回车查看，有openssh的版本信息就是有该工具，可以直接登录了。如果没有，就自己下一个好了_(:з)∠) _，或者看一看有什么其他的比较中意的ssh工具，我这里用的就是我的win10电脑自带的openssh。</p><p>ssh连接服务器的命令：<code>ssh root@你的服务器公网IP</code>，root表示以root用户身份登录服务器，root用户是有最高权限的用户。</p><p>输入完该命令回车之后需要输入服务器密码，由于Linux系统中输入密码屏幕上不会有任何反应，所以不要以为出了什么bug，就安心把密码正确输入就行了，然后回车，就以root用户身份登录到服务器上了。</p><blockquote><p>ssh登录到服务器之后如果一段时间不操作就会断连无响应，这时只能等待它自动退出或者直接关闭命令行窗口再重新连接一下。</p></blockquote><h2 id="CentOS7系统安装nginx"><a href="#CentOS7系统安装nginx" class="headerlink" title="CentOS7系统安装nginx"></a>CentOS7系统安装nginx</h2><p>本文采用命令行操作方式进行nginx软件的安装。</p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>首先去<a href="https://nginx.org/en/download.html">nginx官网下载页面</a>下载“Stable version”中中间的那个文件：</p><p><img src="https://elzzach-src.oss-cn-hangzhou.aliyuncs.com/img/20220806/image-20220723163159459.png" alt="image-20220723163159459"></p><p>下载下来是一个带有<code>.tar.gz</code>后缀名的压缩文件。然后我们要把这个文件上传到服务器的文件夹中，我选择的是上传到&#x2F;opt&#x2F;tools文件夹中，tools文件夹是我新建的。</p><h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3><p>上传有两种方式：下载WinSCP软件用可视化界面来传输文件以及管理服务器文件，这样比较方便。或者使用scp命令将该文件复制到相应的远程目录中。我选择的是使用winscp软件，软件的下载安装和使用方法都很容易解决。</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>将nginx安装包上传到&#x2F;opt&#x2F;tools目录中后用cd命令进入该目录中，然后运行解压命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.22.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这时该目录下就会出现一个叫nginx-1.22.0的目录，用cd命令进入该目录下，然后执行配置命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_stub_status_module --with http_ssl_module</span><br></pre></td></tr></table></figure><p>这条命令后面两个参数是为了以后服务器安装ssl证书做准备的，不然只执行<code>./configure</code>命令的话之后安装ssl证书会提示缺少ssl模块，到时还要重新编译安装比较麻烦（没错就是我踩的坑），所以现在就安装好。</p><p>这条命令执行之后对云服务器来说一般不会有什么问题，但假如出现了一些报错则解决方案如下：</p><p>报错1：<code>error: the HTTP rewrite module requires the PCRE library.</code></p><p>解决方案：在当前工作目录下接着执行<code>yum -y install pcre-devel</code>命令安装所需依赖即可，然后将配置命令再执行一遍。</p><p>报错2：<code>error: SSL modules require the OpenSSL library.</code></p><p>解决方案：在当前工作目录下接着执行<code>yum -y install openssl openssl-devel</code>命令安装所需依赖即可，然后将配置命令再执行一遍。</p><p>其他报错的话自己将报错信息复制粘贴去搜索引擎搜索一下。</p><p>这两个报错是我在自己电脑上的VMware虚拟机的Linux系统里安装nginx时遇到的，当初在云服务器上安装nginx并没有碰到这两个问题，应该是服务器自带了这些依赖。</p><p>出现下图这种输出时就说明配置成功了：</p><p><img src="https://elzzach-src.oss-cn-hangzhou.aliyuncs.com/img/20220806/image-20220723180517257.png" alt="image-20220723180517257"></p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>配置成功之后依次执行以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>等待约二三十秒后安装完成，出现类似于下面的输出：</p><p><img src="https://elzzach-src.oss-cn-hangzhou.aliyuncs.com/img/20220806/image-20220723181008997.png" alt="image-20220723181008997"></p><p>这样的话我们的nginx就算安装好了，接下来我们需要启动它一下来验证安装成功以及配置环境变量。</p><h3 id="启动并访问80端口"><a href="#启动并访问80端口" class="headerlink" title="启动并访问80端口"></a>启动并访问80端口</h3><p><img src="https://elzzach-src.oss-cn-hangzhou.aliyuncs.com/img/20220806/image-20220723181410004.png" alt="image-20220723181410004"></p><p>在上面的输出中红框区域告诉了我们nginx被安装在了哪个目录下，即&#x2F;usr&#x2F;lcoal&#x2F;nginx&#x2F;是我们nginx的所在目录。或者也可以在命令行执行<code>whereis nginx</code>命令来查看。</p><p>以此为例，用cd命令进入&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin目录中，然后执行<code>./nginx</code>命令来启动nginx。</p><p>启动之后我们可以用浏览器访问<code>http://服务器公网ip</code>来看看是否出现了nginx的欢迎页面：</p><p><img src="https://elzzach-src.oss-cn-hangzhou.aliyuncs.com/img/20220806/image-20220723181822290.png" alt="image-20220723181822290"></p><p>出现了就说明启动成功。可能的情况是服务器80端口未开放或者被防火墙挡住了。一般来说阿里云服务器买来之后80端口默认是开放的，可以在<strong>服务器安全组配置</strong>中查看自己服务器的端口开放情况以及通过增减安全组规则来增加开放端口或关闭端口。</p><p>当安全组规则配置好后仍不能访问可能是服务器防火墙问题，可以用如下命令查看并解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙放开的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="comment"># 放开指定端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="comment"># 配置立即生效</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 关闭指定端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=4000/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开环境变量配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在文件末尾加入nginx的位置，即上面whereis命令告诉我们的位置</span></span><br><span class="line"><span class="built_in">export</span> NGINX_HOME=/usr/local/nginx</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NGINX_HOME</span>/sbin</span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 校验配置是否成功，查看nginx版本</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>到此我们的nginx的安装就正式完成了。</p><h2 id="本地部署hexo"><a href="#本地部署hexo" class="headerlink" title="本地部署hexo"></a>本地部署hexo</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本地部署hexo需要先安装nodejs包和git，安装方法请自行搜索。</p><p>Windows安装git可以看廖雪峰老师的教程所说的：</p><p><img src="https://elzzach-src.oss-cn-hangzhou.aliyuncs.com/img/20220806/image-20220730090839398.png" alt="image-20220730090839398"></p><h3 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>如果nodejs环境变量已经配置好，那么直接进入命令行输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装hexo-cli包</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="初始化博客目录"><a href="#初始化博客目录" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h4><p>为博客新建一个文件夹，例如<code>E:\\MyProjects\\blog</code>，下文将用“博客根目录”或“hexo根目录”称呼这个地址。</p><p>将命令行工作目录切到博客根目录下，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>稍等片刻你的博客根目录下就会出现一些文件夹了，目录结构及每个文件夹、文件的作用请看<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a>。</p><p>这时就可以在博客根目录下输入预览命令<code>hexo s</code>然后等待片刻访问它给你的本地地址就可以看到初始效果了。</p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>本站使用的是butterfly主题，主题官网：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>主题安装方法：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><p>实际上hexo主题的安装基本都是这样，在hexo根目录下用git clone命令将相应的主题仓库克隆过来即可，然后就会在themes文件夹里找到相应的主题文件夹了。</p><p>安装好之后记得打开hexo根目录下的hexo配置文件_config.yml找到其中的theme字段将其改成hexo-theme-butterfly以应用主题。其他的工作就需要参考主题文档了，例如对于butterfly主题而言还需要安装两个插件才能渲染出来。</p><p>所有工作完成以后在hexo根目录下执行<code>hexo s</code>预览命令即可看到主题默认效果。</p><blockquote><p>搭建博客过程中要勤看hexo文档和主题文档，认真研读，会发现很多的东西。</p></blockquote><h2 id="服务器部署hexo"><a href="#服务器部署hexo" class="headerlink" title="服务器部署hexo"></a>服务器部署hexo</h2><h3 id="本地配置ssh密钥"><a href="#本地配置ssh密钥" class="headerlink" title="本地配置ssh密钥"></a>本地配置ssh密钥</h3><p>以win10为例，如果用过Github并且进行过远程仓库的推送的话那么在用户目录底下应该有一个.ssh目录，以及目录下应该有一个id_rsa和id_rsa.pub文件。如果没有，在命令行里执行<code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code>命令生成ssh密钥即可。</p><h3 id="服务器安装git"><a href="#服务器安装git" class="headerlink" title="服务器安装git"></a>服务器安装git</h3><p>登录服务器，直接执行<code>yum install git</code>命令即可。</p><h3 id="创建专门用于hexo推送的用户并设置权限"><a href="#创建专门用于hexo推送的用户并设置权限" class="headerlink" title="创建专门用于hexo推送的用户并设置权限"></a>创建专门用于hexo推送的用户并设置权限</h3><p>这一步的目的是创建一个专门用于hexo推送的用户并设置相关的权限，然后通过配置ssh密钥使本地电脑能够，所需要执行的命令总结如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先以root用户身份登录服务器</span></span><br><span class="line">adduser git <span class="comment"># 创建一个叫git的新用户</span></span><br><span class="line"><span class="built_in">chmod</span> 740 /etc/sudoers <span class="comment"># 设置权限使得git用户能够读写sudoers文件</span></span><br><span class="line">vim /etc/sudoers <span class="comment"># 用vim编辑器打开sudoers文件</span></span><br></pre></td></tr></table></figure><p>进入vim编辑器界面后先敲i键进入编辑模式将光标移到以下内容位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>在下面新建一行输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>即为git用户设置能够执行sudo命令的权限。</p><p>然后按esc键退出编辑模式，并依次输入:wq来保存并退出vim。</p><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 /etc/sudoers <span class="comment"># 将git用户对该文件的权限设置为只读</span></span><br><span class="line">sudo passwd git <span class="comment"># 设置git账户的密码，Linux输入密码是不显示的，输入完直接回车就行</span></span><br><span class="line">su git <span class="comment"># 切换至git用户</span></span><br><span class="line"><span class="built_in">mkdir</span> /root/.ssh <span class="comment"># 在root目录下创建.ssh文件夹，当然创建之前可以先确认一下root目录下有没有该文件夹，可以用ls -a命令查看</span></span><br><span class="line">vim /root/.ssh/authorized_keys <span class="comment"># 用vim打开该文件，没有的会直接新建</span></span><br></pre></td></tr></table></figure><p>按i键进入编辑模式，然后在本地电脑上用记事本打开刚刚提到的id_rsa.pub文件，将其中的公钥内容复制到authorized_keys文件中（如果是用命令行登录服务器的话，粘贴是点击鼠标右键粘贴而不是ctrl+v，我不清楚这个是不是随不同品牌电脑而变化的），然后退出编辑模式并保存文件退出vim。</p><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 /home/git/.ssh/authorized_keys <span class="comment"># 将这个文件权限设置为可读写</span></span><br><span class="line"><span class="built_in">chmod</span> 700 /home/git/.ssh <span class="comment"># 将这个目录权限设置为可进入、查看和修改</span></span><br></pre></td></tr></table></figure><p>这时候我们本地电脑应该就能免密登录git用户了，可以在本地执行命令<code>ssh git@服务器ip</code>看是不是不需要输入密码就能登录了。</p><blockquote><p>我是很顺利就成功了，如果碰到报错，请自行搜索并凭借自身的linux知识解决。。。</p></blockquote><blockquote><p>另外通过这一步我们可以看出对于hexo博客而言我们只能在我们部署的这台电脑上写文章推送，因为只有这台电脑上有相应的公钥和密钥，如果换了电脑，就要重新生成公钥和密钥并修改服务器上的authorized_keys文件或者将原来的公钥、密钥文件迁移到新电脑上。</p></blockquote><h3 id="仓库创建及相关配置"><a href="#仓库创建及相关配置" class="headerlink" title="仓库创建及相关配置"></a>仓库创建及相关配置</h3><p>在服务器上新建一个文件夹用作Git仓库的目录，例如&#x2F;var&#x2F;repo这个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先将当前用户切换回到root用户</span></span><br><span class="line"><span class="built_in">mkdir</span> /var/repo</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R git:git /var/repo <span class="comment"># 将仓库目录的所有者设置为git用户</span></span><br><span class="line"><span class="built_in">chmod</span> -R 755 /var/repo <span class="comment"># 赋予对目录的进入、查看、修改权限</span></span><br></pre></td></tr></table></figure><p>再新建一个文件夹作为网站目录，例如&#x2F;var&#x2F;hexo这个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/hexo</span><br><span class="line"><span class="built_in">chown</span> -R git:git /var/hexo</span><br><span class="line"><span class="built_in">chmod</span> -R 755 /var/hexo</span><br></pre></td></tr></table></figure><p>然后初始化git仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>创建Git钩子用于自动部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>按i键然后输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>然后修改所有者和权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R git:git /var/repo/hexo.git/hooks/post-receive</span><br><span class="line"><span class="built_in">chmod</span> +x /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>这样就行了，然后修改一下本地hexo配置文件_config.yml，将deploy字段中的type字段值写为git，然后将repo字段值写为<code>git@服务器ip:/var/repo/hexo.git</code>，服务器ip可以等域名解析到服务器上后改为域名；branch字段值为master。</p><p>这样服务器上hexo的部署就基本成功了，可以在博客根目录执行<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>命令来看是否能够部署成功。</p><p>可能会出现权限相关的问题，多试几次或者自行查阅资料解决，因为我当初没碰到什么问题 :D。</p><h2 id="网站对外提供访问"><a href="#网站对外提供访问" class="headerlink" title="网站对外提供访问"></a>网站对外提供访问</h2><h3 id="Nginx添加站点"><a href="#Nginx添加站点" class="headerlink" title="Nginx添加站点"></a>Nginx添加站点</h3><p>这一步只需要修改nginx的配置文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>找到第一个你看到的具有“listen 80”字段的server节点，修改其中的location字段里的root字段，将它默认的值改为你网站的真实根目录，比如&#x2F;var&#x2F;hexo。</p><p>然后我们需要重载一下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin/</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>然后在本地博客根目录执行一下<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>三件套命令进行推送，推送完访问一下你的服务器ip地址看看是否出现了正常的hexo+butterfly主题的页面。</p><h3 id="域名DNS解析"><a href="#域名DNS解析" class="headerlink" title="域名DNS解析"></a>域名DNS解析</h3><p>这一步是在阿里云的云解析DNS控制台完成的。</p><p>首先进入阿里云云解析DNS控制台，然后点击一个叫“添加域名”的按钮，然后将你当初购买的二级域名填进去，按提示操作即可。</p><p>接下来如果你想直接使用该二级域名作为你博客的域名的话在它里面添加一个A类型记录即可，主机记录直接填写@，记录值填写服务器的ip地址，解析线路和TTL值都保持默认。如果你想像本站一样使用一个三级域名作为博客域名，那还需要再点击一下添加域名按钮，然后填写你想使用的三级域名，例如<code>blog.example.com</code>，注意这里它可能会提示你要添加子域需要先进行TXT授权校验，点击它的提示获得主机记录（一般是alidnscheck）、记录值等信息，然后在自己刚刚的二级域名底下添加一条TXT类型的记录即可，主机记录和记录值填写你刚刚获取的（即alidnscheck和一条长长的乱七八糟的字符串）。等TXT校验成功之后就可以添加三级域名了，然后在该三级域名底下添加一条A记录，记录值填服务器ip地址。主机记录填写时要注意填写的是@而不是blog，因为输入框后面给出来的是你的三级域名，你需要让你填写的主机记录和后面给出的域名连起来读是你所需要的三级域名，@表示直接解析后面的域名。这一点在以后添加主机记录时也要注意，即并不是页面提示你添加哪个主机记录你就直接照搬，视你所添加记录的域名而定。</p><p>等待片刻记录生效之后就可以访问域名看看是否正常显示网站了。</p><p>如果有什么问题的话，可以多参考阿里云官方文档。</p><h3 id="安装SSL证书"><a href="#安装SSL证书" class="headerlink" title="安装SSL证书"></a>安装SSL证书</h3><p>这个不用多说，看这个<a href="https://help.aliyun.com/document_detail/98728.htm">官方教程</a>就够了。</p><p>总结起来就是：首先在阿里云SSL证书控制台为自己的域名申请免费证书，然后下载nginx服务器用的证书到本地，解压后获得pem文件和key文件，然后在服务器上nginx安装目录中的conf目录下新建cert目录（即&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;cert），将刚刚下载的两个证书文件上传到这个cert目录中，然后打开nginx配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>添加一个server节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#以下属性中，以ssl开头的属性表示与证书配置有关。</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    #配置HTTPS的默认访问端口为443。</span><br><span class="line">    #如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span><br><span class="line">    #如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。</span><br><span class="line">    server_name yourdomain; # 你的域名</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    ssl_certificate cert/cert-file-name.pem;  # pem文件名</span><br><span class="line">    ssl_certificate_key cert/cert-file-name.key; # key文件名</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    #表示使用的加密套件的类型。</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的TLS协议的类型，您需要自行评估是否配置TLSv1.1协议。</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;  #Web网站程序存放目录，依本文的例子就是/var/hexo</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载配置即可。</p><p>如果想要配置http请求强制跳转https，那就再添加一个server节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yourdomain; #需要将yourdomain替换成证书绑定的域名。</span><br><span class="line">    rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里一个hexo+butterfly主题的博客网站就搭好了，现在可以自己去探索一下hexo的配置文件和butterfly的配置文件看一看如何搭配自己喜欢的功能，如果想要美化甚至魔改的话那就多参考大佬们的博客站以及发挥自己的创意咯。</p><blockquote><p>本文在hexo服务器部署部分参考了该文章：<a href="https://blog.laoda.de/archives/hexo-building.html">将Hexo部署到阿里云轻量服务器（保姆级教程）</a>，自己当初也是看着这篇文章建成的网站，这里把部分内容抄过来做一下笔记，感谢大佬</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 建站记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站记录系列（一）——前言及准备工作</title>
      <link href="/article/02c95d658b91.html"/>
      <url>/article/02c95d658b91.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本站建站过程实际起始于2021年11月下旬，1月15日使用wordpress框架搭好了一个雏形，<del>然后就一个寒假再也没管过</del>。到了2月下旬我开学的时候，我看到了hexo框架和它的butterfly主题，深为蝴蝶主题的外观感到惊艳，再加上自己是主修前端的，基于node.js的hexo框架自然是深得我心，所以果断将wordpress换成了hexo，主题当然使用的是butterfly。折腾了一段时间才搭建成功，然后后面的几个月我基本就有时间就来看看有什么可以魔改的地方，奈何本人想象力实在贫乏，看着小冰akilar一众大佬的博客乱秀但自己完全无从下手，改了几个月也才改成你们现在（2022年7月）看到的这个样子，。。。</p><p>总之，目前来说看着还凑合，然后就是五个月了，终于决定动手开始写博客了。_ (:з)∠) _</p><p>本文仅仅作为本人hexo建站过程的记录，并不是一份详细的新手向教程，但是可以作为hexo建站的一份参考资料。</p><p>另外由于实在是拖得太久（五个月），有些地方真的不是太想写了😶，所以可能写的有<strong>亿点点马虎</strong>，不过一些重难点都写清楚了，emm……假如有时间会再回来看看然后改改的。</p><blockquote><p>本文不涉及宝塔面板，一切采用Linux命令行操作。弃用宝塔面板是因为它的ssl证书功能在我这失效了，解决不了，结果手动命令行方式安装好了证书，干脆也不再需要宝塔面板了。</p></blockquote><p>建站原材料：</p><ol><li><strong>200多块钱</strong>：用于购买域名及服务器，因此本过程并非是一个免费的过程。想免费可以试试GitHub pages或者vercel等一些静态网页托管服务，比如本站的镜像站就是在Github pages上面。</li><li><strong>一些基础的前端及命令行知识&#x2F;bug定位能力和能折腾的耐心</strong>：搭建hexo博客还是挺折腾的，需要一些技术基础。如果中间没有认真看文档或者某些原因出了错误，最好是能靠自己的定位bug能力分析出来，如果没有那个能力，嗯。。。一言难尽了。你可以跑到主题群里问人，但如果是自己一些基础知识&#x2F;能力没有的话还是会很难受。</li></ol><h2 id="准备工作：域名、服务器、ICP备案"><a href="#准备工作：域名、服务器、ICP备案" class="headerlink" title="准备工作：域名、服务器、ICP备案"></a>准备工作：域名、服务器、ICP备案</h2><p>众所周知要想搭建一个网站我们需要一个服务器和域名，目前本站所使用的是阿里云的云服务器，域名也是从阿里云购买的。这里就不写什么域名、服务器购买教程了，只简单回忆一下步骤：</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><blockquote><p>该步骤用时：3~5天，经济消耗：9元（对我来说）</p></blockquote><p>先去阿里云官网注册一个账号，然后在<a href="https://wanwang.aliyun.com/">阿里云万网</a>上寻找域名，先想好自己想要一个什么样的域名，然后在万网的搜索框里搜索看有没有被别人注册过，如果没有，那就再根据价格等因素来选择一个自己喜欢的域名后缀，比如本站当初选择的域名就是elzzach.top，top域名还是很便宜的，首年只需9元（2021.11月价格），后面每年续费只需29元（每年都要续费一次哦），像什么com、cn这样的域名是比较贵的，都要好几十块钱来着。在购买域名确认订单的时候你可能会发现它提示你需要一个验证过邮箱的信息模板，你可以点击“创建新的信息模板”然后填写自己的一些相关信息，最重要的是你的邮箱要经过验证，验证完邮箱之后你的这个个人信息模板就可以用来确认订单了，接下来支付宝付款即可，这样一个域名就到手了。</p><blockquote><p>域名后缀不要选一些过于奇怪的后缀，比如汉字之类的，这样的域名多数在后面无法完成工信部ICP备案。</p></blockquote><p>到手了之后我们可以在阿里云官网上进入一个叫“域名控制台”的地方，在“域名列表”里我们可以看到自己刚刚购买的域名，然后我们会发现域名状态是“未实名认证”。点击这个未实名认证的链接，会跳转到实名认证界面，我们会发现有两种认证方式，一种是快速认证，即使用已经实名认证的信息模板来认证，但是我们是刚刚注册的账号，信息模板只验证了邮箱并没有实名认证，所以这种方式用不了，那就只能用第二种方法：普通认证。普通认证需要你上传你的身份证的人像面图片，请提前准备好，顺便准备一下身份证国徽面照片，并且将这两张照片保存一段时间，后面ICP备案时会用到。</p><p>实名认证大概需要三到五个工作日，我当初就是四天完成的，完成后会收到邮件通知。</p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><blockquote><p>该步骤用时：几分钟，经济消耗：约174元（假如我当初没加钱的话）</p></blockquote><p>域名实名认证是为了能够解析到服务器上，不然是不能解析的。现在实名认证完成了之后就可以着手准备服务器了。</p><p>服务器仍然是选择在阿里云购买。国内比较好的云服务器厂商有阿里云、腾讯云、百度云、华为云等等，我推荐优先考虑阿里和腾讯。</p><p>首先进入<a href="https://www.aliyun.com/product/ecs">阿里云官网的云服务器购买页面</a>，然后挑选自己心仪的服务器。我所购买的是ECS共享型n4服务器，1核2G1M带宽40G云盘的那种，并且由于是新用户有优惠，买三年只要174元（2021.12月价格），要知道如果不是新用户的话一年就已经需要上千的费用了😰。至于配置的话，我上面说的这个对于单纯的hexo博客网站而言已经足够了，尤其是存储空间是大大的溢出，因为一个hexo博客站初期文件夹大小都只有几M到几十M，完全是够的（猜猜是哪个冤种当初加了二十块钱买了50G的）。唯一可能不太够的就是1M的带宽是有些略小，假如有很多人来访问的话，但是一般而言并发数少的话是没问题的。</p><p>还有就是流量这块，阿里云像这种包年的套餐是相当于无限流量的，所以你不用担心什么网站被打了然后一个月下来流量账单爆炸，但是刚刚也说了带宽不大，假如真被打了虽然不用担心欠费，但是占你带宽让别人无法访问什么的还是可以的。</p><p>选择好了服务器之后点击立即购买，然后选一下服务器所在的地域，一般选一个离自己比较近的地方吧（），或者选一个自己喜欢的随便什么地方，另外再选择一下服务器的操作系统，一般对新手而言服务器会选择CentOS7的系统，如果你对Linux有比较深刻的理解的话就自己选自己的，我选择的是CentOS7.9。请不要选择CentOS8，因为这个版本很早之前已经停止维护了。其他的都保持默认配置即可。接下来就是确认订单并付款啦，这样一台云服务器也就到手了。</p><h3 id="ICP备案"><a href="#ICP备案" class="headerlink" title="ICP备案"></a>ICP备案</h3><blockquote><p>此步骤用时：3-10天，可能更长；经济消耗：0</p></blockquote><p>我没有将我ICP备案的过程进行录屏，然后现在时间有点久了，就只能回忆一下大概过程了。</p><p>ICP备案是任何国内网站都要完成的一道步骤，或者说是服务器在国内的网站，只有在工信部完成了ICP备案才能够对外提供访问，如果网站服务器在港澳台或国外是不需要ICP备案的。</p><p>首先你需要在阿里云官网上找一找ICP备案的相关规定，尤其是你所在地区的规定。如果有不清楚的地方可以询问阿里云客服，客服工作时间一般是早上八点（还是九点来着，而且我还忘了他们一周工作几天来着）到晚上六点，且中午十二点会休息一会。备案过程中遇到问题都可以去问备案方面的客服。</p><p>备案在阿里云官网上进行，但是建议下载阿里云手机app，提交资料会方便一点。一般来说个人网站备案都只需要填写提交服务器IP、一些身份证两面照片、自己手持身份证照片等等资料即可，按照备案过程中的要求来。备案时还需要你给你的网站起一个名字，记住网站名称不可以带有“博客”、“论坛”等字眼，否则申请会在阿里云初审阶段被退回。当你提交了你的备案材料之后记得一定要注意接听电话，阿里云客服工作时间随时会给你来电确认你的身份，就是问一些你的姓名、身份证号码、网站名称、网站用途之类这样的问题。像我当初是上午提交的备案申请，下午两点多就给我打电话来了，但当时我在上课没时间接，结果它就给我把备案申请退回来了，理由是按照提交的电话号码打电话无人接听，无法确认该号码是否属实。然后我下午四点多又提交了一遍，然后几十分钟后就又打电话来了。所以一定要注意接电话。</p><p>接完电话就说明通过了阿里云的初审，你的备案资料将会提交到管局进行审核，这时应该会有一条短信提醒你在工信部备案管理系统上完成短信核验，就是你用它发给你在备案信息中填写的手机号码的验证码去访问它进行核验，就算核验完成了。然后就是等待管局审核你的资料，时间一般在三到十个工作日左右，仍然要注意接听电话，因为我的是第四天它就给我打电话来了，但我没听到，然后它又等了四天才给我再打了一次电话，所以我的备案用时总共是八天。</p><p>这次接电话仍然是确认你的身份和网站信息之类的，之后就算是你的审核通过了，通过之后你应该会收到短信或者邮件的通知，然后登录阿里云账号，你可以看到你的备案网站里面给了你一个备案号，这就是你的ICP备案号了，你需要在搭好你的网站之后将备案号放在网站首页的最下方并链接到<a href="https://beian.miit.gov.cn/">工信部网站</a>，否则被查到的话会处以罚款的。这就是为什么你需要一点前端知识的原因😬。（但是对于hexo的butterfly主题来说即使不会前端也很简单）</p><p>到这里准备工作就结束了，接下来开始正式建站。</p>]]></content>
      
      
      <categories>
          
          <category> 建站记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
